{"mappings":"oeAEAA,EAAA,S,uDCFA,IAAAC,EAAAD,EAAA,SAGA,MAEME,EAA0BC,UAC9B,MAAMC,QAAiBH,EAAAI,QAAMC,IAC3B,2FAYD,MARyB,CACxBC,WAAYH,EAASI,KAAKC,KAC1BC,iBAAkBN,EAASI,KAAKG,QAChCC,kBAAmBR,EAASI,KAAKK,YACjCC,kBAAmBV,EAASI,KAAKO,cAIX,E,uDCyJ1B,IAAAC,EAAAhB,EAAA,SAKA,MAAMiB,EAAmBC,SAASC,cAAc,4BAoChDC,OAAOC,iBAAiB,QA/BF,KAEiBlB,WAC/B,MAAMmB,QAAkBpB,IAE1BqB,QAAQC,IAAIF,GAEV,MAAMG,EAAgBH,EAAUZ,iBAEhCa,QAAQC,IAAIC,GAEZ,MAAMC,QAAsBC,QAAQC,IAClCH,EAAcI,KAAI1B,MAAO2B,SACJ,EAAAd,EAAAe,YAAWD,EAAME,OAOpCf,IACFA,EAAiBgB,UAAYP,EAAcQ,KAAK,KAGlDX,QAAQC,IAAIP,EAAiB,EAG/BkB,EAA4B,I,WCjNlC,IAAAC,EAAApC,EAAA,S,aA6BA,IAAIqC,EALgBnB,SAASC,cAAc,mBAC/BE,iBAAiB,SAASlB,eAtBPA,WAC7B,IACE,MAAMmC,QAAuB,EAAAF,EAAAG,uBACvBC,EAAWtB,SAASC,cAAc,4BACxC,IAAIsB,EAAe,GAEnB,IAAK,MAAMX,KAASQ,EAClB,IAEEG,GAAgB,aADO,EAAAzB,EAAAe,YAAWD,EAAME,U,CAExC,MAAOU,GACPnB,QAAQC,IAAIkB,E,CAIhBF,EAASG,mBAAmB,YAAaF,E,CACzC,MAAOC,GACPnB,QAAQC,IAAIkB,E,GAMRE,EAAwB,IAKhC1B,SAASG,iBAAiB,SAASwB,IACjC,MAAMC,EAAmBD,EAAME,OAAOC,QAAQ,cAC1CF,IACFT,EAASS,EAAiBG,aAAa,MAAK","sources":["src/js/index-catalog.js","src/js/fetches/fetch-trendings-week.js","src/js/other/search-block.js","src/js/other/catalog.js"],"sourcesContent":["// =============Fetches-JS =============\n\nimport \"./fetches/fetch-upcoming\";\nimport \"./fetches/fetch-movie-details\";\nimport \"./fetches/fetch-movie-genre\";\nimport \"./fetches/fetch-trailer\";\nimport \"./fetches/fetch-search\";\nimport \"./fetches/fetch-trendings\";\nimport \"./fetches/fetch-trendings-week\";\n\n// =============Modals-JS =============\n\nimport \"./modals/modal-team\"\nimport \"./modals/slider-modal-team\"\n// import \"./modals/film-info\"\n\n// =============Other-JS =============\n\n// import \"./other/card-markup\"\n// import \"./other/switch-theme-btn\"\nimport \"./other/mob-menu\"\nimport \"./other/slide-menu\"\nimport \"./other/current-page-track\"\nimport \"./other/search-block\"\nimport \"./other/scroll-up\"\nimport './other/catalog'\n// import \"./other/test-card-markup\"\n\n","import axios from 'axios';\n\n\nconst API_KEY = '3e1aa277fd6b8a3cd0a3e29dfce20a5c';\n\nconst fetchTrendingWeekMovies = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/all/week?api_key=${API_KEY}`\n  );\n  //  response.data.results;\n\n   const weeklyTrendsData = {\n    weeklyPage: response.data.page,\n    weeklyTrendsList: response.data.results,\n    weeklyTrendsPages: response.data.total_pages,\n    weeklyTrendsTotal: response.data.total_results,    \n   };\n\n  //  return weeklyTrendsData;\n   return weeklyTrendsData;\n\n};\n\nexport { fetchTrendingWeekMovies };\n","// import flatpickr from \"flatpickr\";\n\n// flatpickr(\".flatpickr-input\", {\n//     dateFormat: \"Y\",\n//     minDate: \"2015\",\n//     maxDate: \"2023\",\n//     static: true,\n//     onOpen: function(selectedDates, dateStr, instance) {\n//       const dropdown = instance.calendarContainer;\n//       dropdown.style.display = \"block\";\n//     },\n//     onClose: function(selectedDates, dateStr, instance) {\n//       const dropdown = instance.calendarContainer;\n//       dropdown.style.display = \"none\";\n//     },\n//     onChange: function(selectedDates, dateStr, instance) {\n//       console.log(\"Обраний рік:\", dateStr);\n//     }\n//   });\n// import { cardMarkup } from './card-markup';\n// import { fetchMovieDetails } from '../fetches/fetch-movie-details';\n// import { fetchSearch } from '../fetch/fetch-search';\n// import Notiflix from 'notiflix';\n\n// const API_KEY = '3e1aa277fd6b8a3cd0a3e29dfce20a5c';\n\n// const container = document.querySelector('.card-list-search-result');\n// const searchForm = document.querySelector('#search-form');\n\n// // Function to load search results\n// const loadMovies = async (inputYear) => {\n//   try {\n//     const response = await fetch(`https://api.themoviedb.org/3/trending/all/week?api_key=${API_KEY}`);\n//     const data = await response.json();\n//     const { results } = data;\n\n//     // Step 2: Destructure the response information\n//     const filteredResults = results.filter(result => {\n//       const releaseYear = Number(result.release_date.slice(0, 4));\n//       return releaseYear === inputYear;\n//     });\n\n//     // Step 4: Map to an array\n//     const movieIds = filteredResults.map(result => result.id);\n\n//     // Step 5: Generate markup for each ID\n//     const movieMarkup = await Promise.all(movieIds.map(async id => {\n//       const movieDetails = await fetchMovieDetails(id);\n//       return cardMarkup(movieDetails.id);\n//     }));\n\n//     // Step 6: Insert markup into the DOM\n//     container.innerHTML = '';\n//     movieMarkup.forEach(card => {\n//       const liElement = document.createElement('li');\n//       liElement.className = 'card-item-search-result';\n//       liElement.innerHTML = card;\n//       container.appendChild(liElement);\n//     });\n//   } catch (error) {\n//     console.log('Error:', error);\n//     Notiflix.Notify.Failure('An error occurred. Please try again.');\n//   }\n// };\n\n// // Event handler for search form submission\n// searchForm.addEventListener('submit', async (event) => {\n//   event.preventDefault();\n//   const inputYear = Number(document.querySelector('.year-of-film-search-form').value);\n\n//   try {\n//     const searchResults = await fetchSearch(inputYear);\n//     const movieIds = searchResults.map(result => result.id);\n//     const movieMarkup = await Promise.all(movieIds.map(async id => {\n//       const movieDetails = await fetchMovieDetails(id);\n//       return cardMarkup(movieDetails.id);\n//     }));\n//     container.innerHTML = '';\n//     movieMarkup.forEach(card => {\n//       const liElement = document.createElement('li');\n//       liElement.className = 'card-item-search-result';\n//       liElement.innerHTML = card;\n//       container.appendChild(liElement);\n//     });\n//   } catch (error) {\n//     console.log('Error:', error);\n//     Notiflix.Notify.Failure('An error occurred. Please try again.');\n//   }\n// });\n\n\n  \n// const inputFilmName = document.querySelector('.input-film-name-search-form');\n// const inputCloseSvg = document.querySelector('.input-close-svg');\n// const searchForm = document.querySelector('.film-name-search-form');\n\n// // \n// inputFilmName.addEventListener('input', () => {\n//   const inputValue = inputFilmName.value.trim();\n\n//   if (inputValue !== '') {\n//     inputCloseSvg.classList.remove('hidden');\n//   } else {\n//     inputCloseSvg.classList.add('hidden');\n//   }\n// });\n\n// // \n// inputCloseSvg.addEventListener('click', () => {\n//   inputFilmName.value = '';\n//   inputCloseSvg.classList.add('hidden');\n// });\n\n// \n// searchForm.addEventListener('submit', (event) => {\n//   event.preventDefault();\n\n//  \n//   const searchQuery = inputFilmName.value.trim();\n\n//   // Виконати необхідні дії зі значенням пошукового запиту, наприклад, відправити на сервер або виконати пошук\n//   // Ваш код тут\n\n//   // Очистити значення інпута\n//   inputFilmName.value = '';\n//   inputCloseSvg.classList.add('hidden');\n// });\n\n// import axios from 'axios';\n\n// const API_KEY = 'YOUR_API_KEY'; // Встановіть свій API ключ TMDb\n\n// const getMovieTrailer = async (movieId) => {\n//   try {\n//     const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/videos`, {\n//       params: {\n//         api_key: API_KEY,\n//       },\n//     });\n\n//     const videos = response.data.results;\n\n//     // Знайдено відео трейлерів\n//     if (videos.length > 0) {\n//       // Виберіть перший трейлер\n//       const trailer = videos.find((video) => video.type === 'Trailer');\n\n//       if (trailer) {\n//         const trailerKey = trailer.key;\n//         const trailerUrl = `https://www.youtube.com/watch?v=${trailerKey}`;\n\n//         // Виконайте необхідні дії з посиланням на трейлер\n//         console.log(trailerUrl);\n//       } else {\n//         // Не знайдено відео трейлерів\n//         console.log('No trailer found');\n//       }\n//     } else {\n//       // Не знайдено відео трейлерів\n//       console.log('No trailer found');\n//     }\n//   } catch (error) {\n//     console.log('Error:', error);\n//   }\n// };\n\n// getMovieTrailer(cardId);\n\n\n\n// ------------------------------------------------------------------------ //\n\nimport { cardMarkup } from './card-markup';\n// import { fetchMovieDetails } from '../fetches/fetch-movie-details';\n\nimport {fetchTrendingWeekMovies} from '../fetches/fetch-trendings-week';\n\nconst catalogContainer = document.querySelector('.card-list-search-result');\n\n\n// ------------------ Start catalog cards markup --------------------\n\nconst onLoadCatalog = () => {\n\n    const displayWeeklyTrendsCatalog = async () => {\n        const trendData = await fetchTrendingWeekMovies();\n\n      console.log(trendData);\n\n        const trendFilmList = trendData.weeklyTrendsList;\n\n        console.log(trendFilmList);\n      \n        const catalogMovies = await Promise.all(\n          trendFilmList.map(async (movie) => {\n            const card = await cardMarkup(movie.id);\n            return card;\n          })\n        );\n      \n        // const catalogTrendsList = document.querySelector('.home-trends-list');\n    \n        if (catalogContainer) {\n          catalogContainer.innerHTML = catalogMovies.join('');\n        }\n\n        console.log(catalogContainer);\n      };\n      \n      displayWeeklyTrendsCatalog();\n\n}\n\nwindow.addEventListener('load', onLoadCatalog);\n\n\n// ------------------ Query catalog cards markup --------------------\n\n","import { fetchTrendingMovies } from '../fetches/fetch-trendings';\nimport { cardMarkup } from './card-markup';\n\nconst populateTrendingMovies = async () => {\n  try {\n    const trendingMovies = await fetchTrendingMovies();\n    const cardList = document.querySelector('.card-list-search-result');\n    let allFilmCards = '';\n\n    for (const movie of trendingMovies) {\n      try {\n        const filmCard = await cardMarkup(movie.id);\n        allFilmCards += `<li>${filmCard}</li>`;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    cardList.insertAdjacentHTML('beforeend', allFilmCards);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst catalogLink = document.querySelector('.header-catalog');\ncatalogLink.addEventListener('click', async () => {\n  await populateTrendingMovies();\n});\n\nlet cardId;\n\ndocument.addEventListener('click', event => {\n  const clickedMovieCard = event.target.closest('.film-card');\n  if (clickedMovieCard) {\n    cardId = clickedMovieCard.getAttribute('id');\n  }\n});\n\nexport { cardId };\n"],"names":["parcelRequire","$2shzp","$d0547d42d74d64f4$export$18ffe7dc79bb9220","async","response","default","get","weeklyPage","data","page","weeklyTrendsList","results","weeklyTrendsPages","total_pages","weeklyTrendsTotal","total_results","$8nneY","$5b50859aa0407d96$var$catalogContainer","document","querySelector","window","addEventListener","trendData","console","log","trendFilmList","catalogMovies","Promise","all","map","movie","cardMarkup","id","innerHTML","join","displayWeeklyTrendsCatalog","$fgOKF","$b2c065d4b92751e3$export$6baf9af6c3bc51a","trendingMovies","fetchTrendingMovies","cardList","allFilmCards","error","insertAdjacentHTML","$b2c065d4b92751e3$var$populateTrendingMovies","event","clickedMovieCard","target","closest","getAttribute"],"version":3,"file":"catalog.aedecbd9.js.map"}